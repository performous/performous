name: Build AppImage Packages

on:
  # Run when called from other workflows
  workflow_call:
    inputs:
      package_complete_version:
        description: 'The output of the complete_version of the "determine_version" job from the build_and_release.yml workflow'
        required: true
        type: string
      release_id:
        description: 'The output of the "create_release" job from the build_and_release.yml workflow'
        required: true
        type: string

jobs:
  AppImage:
    name: Create the AppImage
    runs-on: ubuntu-24.04
    permissions:
      security-events: write
    steps:
      - name: Insstall the AppImage bundler and Performous deps
        id: fetch_deps
        run: |
          wget -O appimage-builder-x86_64.AppImage.tar https://github.com/Lord-Kamina/appimage-builder/releases/download/continuous/appimage-builder_x86_64-AppImage.tar
          tar xvf appimage-builder-x86_64.AppImage.tar --transform='s/.*\///'
          mv appimage-builder-*-x86_64.AppImage appimage-builder-x86_64.AppImage
          chmod +x appimage-builder-x86_64.AppImage
          sudo mv appimage-builder-x86_64.AppImage /usr/local/bin/appimage-builder
          sudo apt update
          sudo apt-get -y install ca-certificates wget gpg
          wget -O ./key.asc https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null
          gpg -v -o /usr/share/keyrings/kitware-archive-keyring.gpg --dearmor ./key.asc
          echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ noble main' | sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null
          sudo apt-get -y update
          test -f /usr/share/doc/kitware-archive-keyring/copyright || sudo rm /usr/share/keyrings/kitware-archive-keyring.gpg
          sudo apt-get install kitware-archive-keyring
          sudo apt-get install -y --no-install-recommends git cmake build-essential gettext help2man libopenblas-dev libfftw3-dev libicu-dev libepoxy-dev libsdl2-dev libfreetype6-dev libpango1.0-dev librsvg2-dev libxml++2.6-dev libavcodec-dev libavformat-dev libswscale-dev libjpeg-dev portaudio19-dev libglm-dev libboost-iostreams-dev libboost-locale-dev libboost-system-dev libboost-program-options-dev libssl-dev libcpprest-dev libgtest-dev libgmock-dev google-mock libportmidi-dev libopencv-dev libaubio-dev nlohmann-json3-dev libfmt-dev libfuse2 libspdlog-dev

      - name: Checkout Git
        id: checkout_git
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: c-cpp
          build-mode: manual
          queries: security-and-quality

      - name: Build the Code
        id: build_appimage
        run: |
          export PERFORMOUS_PACKAGE_VERSION=${{ inputs.package_complete_version }}
          mkdir build
          cd build
          cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=RelWithDebInfo -DENABLE_WEBSERVER=ON -DENABLE_WEBCAM=ON -DSELF_BUILT_CED=ALWAYS -DPERFORMOUS_VERSION=$PERFORMOUS_PACKAGE_VERSION ..
          make -j$(nproc) install DESTDIR=../AppDir
          cd ..

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:c-cpp"

      - name: Bundle the AppImage
        run: |
          # Pull in our common build functions
          . .github/workflows/build_functions.sh
          export PERFORMOUS_PACKAGE_VERSION=${{ inputs.package_complete_version }}
          appimage-builder --recipe AppImageBuilder.yml --skip-test
          # Provided by the common build functions
          package_name "$(pwd)" "*.AppImage" "${PERFORMOUS_PACKAGE_VERSION}"

      # Upload artifacts during pull-requests
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        if: ${{ github.event_name == 'pull_request' }}
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_PATH }}

      # Upload artifacts on master
      - name: Upload artifact with unified name
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.MASTER_ARTIFACT_NAME }}
          path: ${{ env.MASTER_ARTIFACT_PATH }}

      # Upload artifacts to releases only during Release events
      - name: Upload artifacts to tagged release
        id: upload_assets
        if: ${{ github.event_name != 'pull_request' && github.ref_type == 'tag' }}
        uses: xresloader/upload-to-github-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ inputs.release_id }}
          file: ${{ env.ARTIFACT_PATH }}
