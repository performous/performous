name: Build MacOS Package

on:
  # Run when called from other workflows
  workflow_call:
    inputs:
      package_complete_version:
        description: 'The output of the complete_version of the "determine_version" job from the build_and_release.yml workflow'
        required: true
        type: string
      release_id:
        description: 'The output of the "create_release" job from the build_and_release.yml workflow'
        required: true
        type: string
    secrets:
      NGROK_SSH_TOKEN:
        description: 'Token for SSH debug'
        required: false
      NGROK_SSH_PASS:
        description: 'Pass for SSH debug'
        required: false

jobs:
  Install_MacPorts:
    strategy:
      matrix:
        os: [ 'macos-13', 'macos-14' ]
    name: Install Macports
    runs-on: '${{ matrix.os }}'
    env:
      MACOS_DEPS: >-
        aubio
        boost187
        boost
        cairo
        cmake
        cpprestsdk
        dylibbundler
        ffmpeg7
        fftw-3-single
        libfmt11
        fontconfig
        freetype
        glm
        gtest
        help2man
        icu
        libepoxy
        librsvg
        libsdl2
        libxmlxx5
        nlohmann-json
        opencv4
        openssl
        pango
        portaudio
        portmidi
        boost.version=1.87
    steps:
      - name: Checkout Git
        id: checkout_git
        uses: actions/checkout@v4
        with:
          path: performous

      - name: Install Macports
        uses: Lord-Kamina/setup-macports@main
        with:
          parameters: ./performous/.github/macports-settings.yml
          enable-cache: 'false'

      - name: Amend macports configuration
        run: |
          echo macosx_deployment_target 12.0 | tee -a /opt/local/etc/macports/macports.conf
          echo cxx_stdlib libc++ | tee -a /opt/local/etc/macports/macports.conf
          echo buildmakejobs 0 | tee -a /opt/local/etc/macports/macports.conf
          echo startupitem_type none | tee -a /opt/local/etc/macports/macports.conf
          echo build_arch $(uname -m) | tee -a /opt/local/etc/macports/macports.conf

      - name: Determine cache key
        run: |
          echo macOS $(sw_vers -productVersion | cut -f1 -d.) | tee ./cache-key.txt
          echo CPU Type: $(uname -m) | tee -a ./cache-key.txt
          port info --fullname all and \( ${MACOS_DEPS} \)  | grep -v -e'^--$' | cut -w -f2-3 | tee -a ./cache-key.txt
          echo contents of cache-key-file: 
          cat ./cache-key.txt

      - name: Try to restore cache
        id: restore_cache
        uses: Lord-Kamina/always-upload-cache/restore@refresh-cache
        with:
          path: /opt/local
          key: macports-${{matrix.os}}-${{ hashFiles('./cache-key.txt') }}

      - name: Unlink Homebrew
        run: |
          brew unlink $(brew list --formula)
          echo cmake: $(which cmake)

      - name: Install Dependencies
        # First, we install packages that are both direct dependencies of performous, as well as of other packages that we will eventually need.
        # The idea is to build from source everything performous actually depends on to run (so, direct and transitive RUNTIME dependencies),
        # and to install from packaged binaries everything else we need but not at runtime (i.e. cmake and various versions of python and/or compilers)
        run: |
          set -x
          if [[ "${{ steps.restore_cache.outputs.cache-hit }}" == "true" ]]; then
            echo buildfromsource never | tee -a /opt/local/etc/macports/macports.conf
          else
            echo buildfromsource always | tee -a /opt/local/etc/macports/macports.conf
          fi
          sudo port install zlib
          sudo port -b install libiconv gperf libtextstyle ncurses
          sudo port install gettext icu 
          sudo port -b install $(port echo rdepof:openssl | xargs) 
          sudo port install openssl
          sudo port selfupdate
          echo "What depends on clangs?" 
          echo "Clang-14: $(port echo depends:clang-14 | xargs)"
          echo "Clang-17: $(port echo depends:clang-17 | xargs)"
          echo "Clang-19: $(port echo depends:clang-19 | xargs)"
          echo "Clang-20: $(port echo depends:clang-20 | xargs)"
          if [[ "${{ steps.restore_cache.outputs.cache-hit }}" != "true" ]]; then
            sudo port -b install cmake python312 python313 clang-14 clang-17 clang-19 clang-20 gcc14 help2man +perl5_34 meson perl5.34 pkgconfig
          fi

          sudo port install glib2

          if [[ "${{ steps.restore_cache.outputs.cache-hit }}" != "true" ]]; then
            sudo port -b install $(port echo rdepof:shared-mime-info | xargs) shared-mime-info rust cargo

          fi
          sudo port -v install ${MACOS_DEPS}
          echo "Installed ports: "
          port installed
          echo "Port leaves: "
          port echo leaves
          sudo port uninstall gcc14 clang* llvm* python310 python311
          sudo port clean --all installed

      - name: Cache dependencies
        uses: Lord-Kamina/always-upload-cache/save@refresh-cache
        with:
          refresh-cache: true
          path: |
            /opt/local
            /Applications/MacPorts
          key: macports-${{matrix.os}}-${{ hashFiles('./cache-key.txt') }}

      - name: Build package
        id: build_package
        run: |
          cd performous/osx-utils
          chmod +x ./macos-bundler.py
          python3 -m venv ./bundler-venv
          source ./bundler-venv/bin/activate
          pip3 install -r ./macos-bundler-requirements.txt
          python3 ./macos-bundler.py --flat-output --package-version="${{ inputs.package_complete_version }}" --enable-webserver=on --enable-midi=on --enable-webcam=on --build-tests=on --target=12.0 --prefer-macports
          PACKAGE_PATH="${{ github.workspace }}/performous/osx-utils/out/Performous-${{ inputs.package_complete_version }}-$(uname -m).dmg"
          MASTER_PACKAGE_PATH="${{ github.workspace }}/performous/osx-utils/out/Performous-master[${{ inputs.package_complete_version }}]-$(uname -m).dmg"
          cp -v ${PACKAGE_PATH} ${MASTER_PACKAGE_PATH}
          echo "ARTIFACT_PATH=${PACKAGE_PATH}" >> ${GITHUB_ENV}
          echo "ARTIFACT_NAME=$(basename ${PACKAGE_PATH})" >> ${GITHUB_ENV}
          echo "MASTER_ARTIFACT_PATH=${MASTER_PACKAGE_PATH}" >> ${GITHUB_ENV}
          echo "MASTER_ARTIFACT_NAME=$(basename ${MASTER_PACKAGE_PATH})" >> ${GITHUB_ENV}
      - name: Run unittests directly called.
        run: |
          cd "${{ github.workspace }}/performous/build/testing"
          ./performous_test --gtest_filter=UnitTest*
      - name: Run unittests by ctest.
        run: |
          cd "${{ github.workspace }}/performous/build"
          make test

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: ${{ github.event_name == 'pull_request' }}
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_PATH }}

      - name: Upload artifact with unified name
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.MASTER_ARTIFACT_NAME }}
          path: ${{ env.MASTER_ARTIFACT_PATH }}

      - name: Upload artifacts to tagged release
        id: upload_assets
        if: ${{ github.event_name != 'pull_request' && github.ref_type == 'tag' }}
        uses: xresloader/upload-to-github-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ inputs.release_id }}
          file: ${{ env.ARTIFACT_PATH }}

      - name: Start SSH session
        if: false
        id: ssh_debug
        uses: luchihoratiu/debug-via-ssh@main
        with:
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_SSH_TOKEN }}
          SSH_PASS: ${{ secrets.NGROK_SSH_PASS }}

