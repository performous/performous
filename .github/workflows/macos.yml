name: Build MacOS Package

on:
  # Run on a schedule to get monthly updates
  schedule:
    - cron: "0 0 28 * *"

  # Run when called from other workflows
  workflow_call:
    inputs:
      package_complete_version:
        description: 'The output of the complete_version of the "determine_version" job from the build_and_release.yml workflow'
        required: true
        type: string
      release_upload_url:
        description: 'The output of the "create_release" job from the build_and_release.yml workflow'
        required: true
        type: string

jobs:
  # Create the MacOS dmg
  MacOS_Packages:
    name: Create MacOS dmg
    runs-on: macos-latest
    steps:
      - name: Checkout Git
        id: checkout_git
        uses: actions/checkout@v3
        with:
          path: performous


      # brew fetch runs downloads in parallel, which is faster
      # than letting install do it
      - name: Fetch Dependencies
        id: fetch_deps
        run: |
          brew fetch --deps boost cmake ffmpeg@4 help2man icu4c portaudio\
            portmidi opencv libepoxy librsvg libxml++3 sdl2 dylibbundler\
            aubio fftw glm nlohmann-json fmt

      - name: Install Dependencies
        id: install_deps
        run: |
           brew install boost cmake ffmpeg@4 help2man icu4c portaudio\
            portmidi opencv libepoxy librsvg libxml++3 sdl2 dylibbundler\
            aubio fftw glm nlohmann-json fmt
           brew link --force --overwrite ffmpeg@4

      - name: Setup Python
        id: setup_python
        uses: actions/setup-python@v4 
        with:
            python-version: 'pypy3.9' 
            cache: 'pip'
            cache-dependency-path: "${{ github.workspace }}/performous/osx-utils/macos-bundler-requirements.txt"

      - name: Build package
        id: build_package
        run: |
          cd performous/osx-utils
          chmod +x ./macos-bundler.py
          pip3 install -r ./macos-bundler-requirements.txt
          ./macos-bundler.py --flat-output --package-version="${{ inputs.package_complete_version }}"
          PACKAGE_PATH=$(ls "${{ github.workspace }}/performous/osx-utils/out/Performous-${{ inputs.package_complete_version }}.dmg")
          MASTER_PACKAGE_PATH="${{ github.workspace }}/performous/osx-utils/out/Performous-latest.dmg"
          cp -v ${PACKAGE_PATH} ${MASTER_PACKAGE_PATH}
          echo "ARTIFACT_PATH=${PACKAGE_PATH}" >> ${GITHUB_ENV}
          echo "ARTIFACT_NAME=$(basename ${PACKAGE_PATH})" >> ${GITHUB_ENV}
          echo "MASTER_ARTIFACT_PATH=${MASTER_PACKAGE_PATH}" >> ${GITHUB_ENV}
          echo "MASTER_ARTIFACT_NAME=$(basename ${MASTER_PACKAGE_PATH})" >> ${GITHUB_ENV}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        if: ${{ github.event_name == 'pull_request' }}
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_PATH }}

      - name: Upload artifact with unified name
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.MASTER_ARTIFACT_NAME }}
          path: ${{ env.MASTER_ARTIFACT_PATH }}

      - name: Upload artifacts to tagged release
        id: upload_assets
        if: ${{ github.event_name != 'pull_request' && github.ref_type == 'tag' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ inputs.release_upload_url }}
          asset_path: ${{ env.ARTIFACT_PATH }}
          asset_name: ${{ env.ARTIFACT_NAME }}
          asset_content_type: application/octet-stream
