name: Build and Release Performous

# Controls when the workflow will run
on:
  # Triggers the workflow on merges to master, release branches,
  # all PRs, and release tags 
  push:
    branches:
      - master
      - '[0-9]+\.[0-9]+\.[0-9]+-rc[0-9]+'
    tags:
      - '[0-9]+\.[0-9]+\.[0-9]+'
      - '[0-9]+\.[0-9]+\.[0-9]+-rc[0-9]+'

  # On anything pull request related
  pull_request:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Note: entire jobs or sections can be disabled by adding
# if: ${{ false }} to the definition column
jobs:
  # Determine version
  determine_version:
    name: Determine the version to be used
    runs-on: ubuntu-latest
    outputs:
      latest_tag_version: ${{ steps.versioning.outputs.latest_tag_version }}
      latest_full_tag_version: ${{ steps.versioning.outputs.latest_full_tag_version }}
      version_major: ${{ steps.versioning.outputs.version_major }}
      version_minor: ${{ steps.versioning.outputs.version_minor }}
      version_patch: ${{ steps.versioning.outputs.version_patch }}
      version_tweak: ${{ steps.versioning.outputs.version_tweak }}
      complete_version: ${{ steps.versioning.outputs.complete_version }}
    steps:
      - name: Determine the complete version
        id: versioning
        run: |
          # Always check the tags on master since it will have the latest.
          # Tags will trigger their own workflow and version names
          git clone --recursive ${{ github.server_url }}/${{ github.repository }}
          cd performous
          LATEST_TAG_VERSION=$(git describe --tags --abbrev=0 || echo 1.0.0)
          LATEST_FULL_TAG_VERSION=$(git describe --tags || echo 1.0.0)
          echo "latest_tag_version=$(git describe --tags --abbrev=0 || echo 1.0.0)" >> $GITHUB_OUTPUT
          echo "latest_full_tag_version=$(git describe --tags || echo 1.0.0)" >> $GITHUB_OUTPUT
          echo "version_major=$(cut -d '.' -f 1 <<< $(git describe --tags --abbrev=0 || echo 1.0.0))" >> $GITHUB_OUTPUT
          echo "version_minor=$(cut -d '.' -f 2 <<< $(git describe --tags --abbrev=0 || echo 1.0.0))" >> $GITHUB_OUTPUT
          echo "version_patch=$(cut -d '.' -f 3 <<< $(git describe --tags --abbrev=0 || echo 1.0.0))" >> $GITHUB_OUTPUT
          echo "version_tweak=0" >> $GITHUB_OUTPUT
          echo "complete_version=$(if [ $GITHUB_REF_TYPE = 'tag' ]; then echo $GITHUB_REF_NAME; elif [ $GITHUB_REF_TYPE = 'branch' ] && [ $GITHUB_REF_NAME = 'master' ]; then echo $LATEST_FULL_TAG_VERSION-beta; elif [ $GITHUB_REF_TYPE = 'branch' ] && [ $GITHUB_REF_NAME != 'master' ]; then echo $LATEST_TAG_VERSION-${{github.event.pull_request.number}}-${GITHUB_SHA::7}-alpha; fi)" >> $GITHUB_OUTPUT

  # Set up a release that packages will be published to.
  create_release:
    name: Create a release
    runs-on: ubuntu-latest
    # Make sure the output variable for this step is set so it
    # can be consumed by later build steps
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create the Main release
        id: create_release
        if: ${{ github.event_name != 'pull_request' && github.ref_type == 'tag' }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Performous ${{ github.ref_name }}
          draft: true
          prerelease: false

  # Pull in the Linux build workflow
  Linux_Packages:
    name: Build the Linux packages
    uses: ./.github/workflows/linux.yml
    with:
      package_complete_version: ${{ needs.determine_version.outputs.complete_version }}
      release_upload_url: ${{ needs.create_release.outputs.upload_url }}
    needs:
      - determine_version
      - create_release

  # Create the AppImage
  AppImage:
    name: Create the AppImage
    needs:
      - determine_version
      - create_release
    runs-on: ubuntu-20.04
    steps:
      - name: Install the AppImage bundler and Performous deps
        id: fetch_deps
        run: |
          wget -O appimage-builder-x86_64.AppImage https://github.com/AppImageCrafters/appimage-builder/releases/download/v1.0.0-beta.1/appimage-builder-1.0.0-677acbd-x86_64.AppImage
          chmod +x appimage-builder-x86_64.AppImage
          sudo mv appimage-builder-x86_64.AppImage /usr/local/bin/appimage-builder
          sudo apt update
          sudo apt-get install -y --no-install-recommends git cmake build-essential gettext help2man libopenblas-dev libfftw3-dev libicu-dev libepoxy-dev libsdl2-dev libfreetype6-dev libpango1.0-dev librsvg2-dev libxml++2.6-dev libavcodec-dev libavformat-dev libswscale-dev libjpeg-dev portaudio19-dev libglm-dev libboost-filesystem-dev libboost-iostreams-dev libboost-locale-dev libboost-system-dev libboost-program-options-dev libssl-dev libcpprest-dev libportmidi-dev libopencv-dev libaubio-dev nlohmann-json3-dev libfmt-dev

      - name: Checkout Git
        id: checkout_git
        uses: actions/checkout@v3
        with:
          path: performous

      - name: Build the AppImage
        id: build_appimage
        run: |
          cd performous
          PACKAGE_VERSION=${{ needs.determine_version.outputs.complete_version }}
          sed -i s/@@VERSION@@/${PACKAGE_VERSION}/ AppImageBuilder.yml
          mkdir build
          cd build
          cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Release -DENABLE_WEBSERVER=ON -DENABLE_WEBCAM=ON -DPERFORMOUS_VERSION=$PACKAGE_VERSION ..
          make -j$(nproc) install DESTDIR=../AppDir
          cd ..
          appimage-builder --recipe AppImageBuilder.yml --skip-test

          WORK_DIR=$(pwd)
          PACKAGE_PATH=$(ls ${WORK_DIR}/*.AppImage)
          PACKAGE_NAME=$(echo ${PACKAGE_PATH} | sed 's/\(Performous\).*$/\1/')
          PACKAGE_SUFFIX=".AppImage"
          NEW_PACKAGE_NAME="${PACKAGE_NAME}-${PACKAGE_VERSION}${PACKAGE_SUFFIX}"
          MASTER_NEW_PACKAGE_NAME="${PACKAGE_NAME}-latest${PACKAGE_SUFFIX}"
          cp ${PACKAGE_PATH} ${MASTER_NEW_PACKAGE_NAME}
          mv ${PACKAGE_PATH} ${NEW_PACKAGE_NAME}
          ARTIFACT_NAME=$( echo ${NEW_PACKAGE_NAME} | rev | cut -d '/' -f1 | rev)
          MASTER_ARTIFACT_NAME=$( echo ${MASTER_NEW_PACKAGE_NAME} | rev | cut -d '/' -f1 | rev)
          echo "ARTIFACT_PATH=${NEW_PACKAGE_NAME}" >> ${GITHUB_ENV}
          echo "ARTIFACT_NAME=${ARTIFACT_NAME}" >> ${GITHUB_ENV}
          echo "MASTER_ARTIFACT_PATH=${MASTER_NEW_PACKAGE_NAME}" >> ${GITHUB_ENV}
          echo "MASTER_ARTIFACT_NAME=${MASTER_ARTIFACT_NAME}" >> ${GITHUB_ENV}

      # Upload artifacts during pull-requests
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        if: ${{ github.event_name == 'pull_request' }}
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_PATH }}

      # Upload artifacts on master
      - name: Upload artifact with unified name
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.MASTER_ARTIFACT_NAME }}
          path: ${{ env.MASTER_ARTIFACT_PATH }}

      # Upload artifacts to releases only during Release events
      - name: Upload artifacts to tagged release
        id: upload_assets
        if: ${{ github.event_name != 'pull_request' && github.ref_type == 'tag' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ env.ARTIFACT_PATH }}
          asset_name: ${{ env.ARTIFACT_NAME }}
          asset_content_type: application/octet-stream


  # Create the MacOS dmg
  MacOS_Packages:
    name: Create MacOS dmg
    needs:
      - determine_version
      - create_release
    runs-on: macos-latest
    steps:
      - name: Checkout Git
        id: checkout_git
        uses: actions/checkout@v3
        with:
          path: performous


      # brew fetch runs downloads in parallel, which is faster
      # than letting install do it
      - name: Fetch Dependencies
        id: fetch_deps
        run: |
          brew fetch --deps boost cmake ffmpeg@4 help2man icu4c portaudio\
            portmidi opencv libepoxy librsvg libxml++3 sdl2 dylibbundler\
            aubio fftw glm nlohmann-json fmt

      - name: Install Dependencies
        id: install_deps
        run: |
           brew install boost cmake ffmpeg@4 help2man icu4c portaudio\
            portmidi opencv libepoxy librsvg libxml++3 sdl2 dylibbundler\
            aubio fftw glm nlohmann-json fmt
           brew link --force --overwrite ffmpeg@4

      - name: Build package
        id: build_package
        run: |
          cd performous/osx-utils
          # This export is required because the variable is consumed by the 
          # MacOS build script to set the version correctly
          export PACKAGE_VERSION=${{ needs.determine_version.outputs.complete_version }}
          echo $PACKAGE_VERSION
          chmod +x ./performous-app-build.sh
          WORK_DIR=$(pwd)
          mkdir -p out
          export PERFORMOUS_OUTPUT_DIR="${WORK_DIR}/out"
          ./performous-app-build.sh
          PACKAGE_PATH=$(ls ${PERFORMOUS_OUTPUT_DIR}/Performous*.dmg)
          PACKAGE_NAME=$(echo ${PACKAGE_PATH} | sed 's/\(Performous\).*$/\1/')
          PACKAGE_SUFFIX=$(echo ${PACKAGE_PATH} | sed 's/^.*\(.\{4\}\)/\1/')
          NEW_PACKAGE_NAME="${PACKAGE_NAME}-${PACKAGE_VERSION}${PACKAGE_SUFFIX}"
          MASTER_NEW_PACKAGE_NAME="${PACKAGE_NAME}-latest${PACKAGE_SUFFIX}"
          cp ${PACKAGE_PATH} ${MASTER_NEW_PACKAGE_NAME}
          mv ${PACKAGE_PATH} ${NEW_PACKAGE_NAME}
          ARTIFACT_NAME=$( echo ${NEW_PACKAGE_NAME} | rev | cut -d '/' -f1 | rev)
          MASTER_ARTIFACT_NAME=$( echo ${MASTER_NEW_PACKAGE_NAME} | rev | cut -d '/' -f1 | rev)
          echo "ARTIFACT_PATH=${NEW_PACKAGE_NAME}" >> ${GITHUB_ENV}
          echo "ARTIFACT_NAME=${ARTIFACT_NAME}" >> ${GITHUB_ENV}
          echo "MASTER_ARTIFACT_PATH=${MASTER_NEW_PACKAGE_NAME}" >> ${GITHUB_ENV}
          echo "MASTER_ARTIFACT_NAME=${MASTER_ARTIFACT_NAME}" >> ${GITHUB_ENV}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        if: ${{ github.event_name == 'pull_request' }}
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_PATH }}

      - name: Upload artifact with unified name
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.MASTER_ARTIFACT_NAME }}
          path: ${{ env.MASTER_ARTIFACT_PATH }}

      - name: Upload artifacts to tagged release
        id: upload_assets
        if: ${{ github.event_name != 'pull_request' && github.ref_type == 'tag' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ env.ARTIFACT_PATH }}
          asset_name: ${{ env.ARTIFACT_NAME }}
          asset_content_type: application/octet-stream

  # Create the Windows installer
  Windows_MSVC_Packages:
    name: Create Windows installer with MSVC
    needs:
      - determine_version
      - create_release
    runs-on: windows-latest
    defaults:
      run:
        shell: powershell
    steps:
      - name: Checkout Git
        id: checkout_git
        uses: actions/checkout@v3
        with:
          path: performous


      - name: Setup our dev environment
        uses: ilammy/msvc-dev-cmd@v1

      - name: Setup ninja cmake generator
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Download and build our dependencies using vcpkg
        uses: Lord-Kamina/vcpkg-action@master
        with:
          pkgs: aubio boost-iostreams boost-locale boost-program-options boost-system cairo cpprestsdk ffmpeg fftw3 fmt fontconfig gdk-pixbuf gettext glibmm glm gtest icu libepoxy librsvg libsigcpp libxml2 libxmlpp nlohmann-json openblas opencv openssl pango portaudio portmidi pthreads sdl2
          triplet: x64-windows-release
          extra-args: --clean-after-build
          cache-key: win64-vcpkg

      - name: Run cmake to configure the project and build it
        env:
          PERFORMOUS_VERSION: ${{ needs.determine_version.outputs.complete_version }}
        run: |
          set VCPKG_DEFAULT_BINARY_CACHE=${{ github.workspace }}/vcpkg_cache
          cd ${{ github.workspace }}/performous
          echo $PERFORMOUS_VERSION
          cmake --preset "x64-release" -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=x64-windows-release
          cmake --build --preset "x64-release"
      - name: Run unittests directly called.
        run: |
          cd "performous/build/x64-release/testing"
          ./performous_test.exe --gtest_filter=UnitTest*
      - name: Run unittests by ctest.
        run: |
          cd "performous/build/x64-release"
          ninja testing/test
      - name: Create Installer
        id: package_performous_x64
        run: |
           cd performous/build/x64-release
           cpack -G NSIS64 x64-release
           Copy-Item $(Get-ChildItem -Filter '*win64.exe').Name "Performous-latest-msvc.exe"
           Rename-Item $(Get-ChildItem -Filter '*win64.exe').Name -NewName "Performous-${{ needs.determine_version.outputs.complete_version }}.exe"
           chcp 65001 #set code page to utf-8
           echo ("ARTIFACT_PATH=${{ github.workspace }}/performous/build/x64-release/Performous-${{ needs.determine_version.outputs.complete_version }}.exe") >> $env:GITHUB_ENV
           echo ("ARTIFACT_FILENAME=Performous-${{ needs.determine_version.outputs.complete_version }}.exe") >> $env:GITHUB_ENV
           echo ("MASTER_ARTIFACT_PATH=${{ github.workspace }}/performous/build/x64-release/Performous-latest-msvc.exe") >> $env:GITHUB_ENV
           echo ("MASTER_ARTIFACT_FILENAME=Performous-latest-msvc.exe") >> $env:GITHUB_ENV

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        if: ${{ github.event_name == 'pull_request' }}
        with:
          name: ${{ env.ARTIFACT_FILENAME }}
          path: ${{ env.ARTIFACT_PATH }}

      - name: Upload artifact with unified name
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.MASTER_ARTIFACT_FILENAME }}
          path: ${{ env.MASTER_ARTIFACT_PATH }}

      - name: Upload artifacts to tagged release
        id: upload_assets
        uses: actions/upload-release-asset@v1
        if: ${{ github.event_name != 'pull_request' && github.ref_type == 'tag' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ env.ARTIFACT_PATH }}
          asset_name: ${{ env.ARTIFACT_FILENAME }}
          asset_content_type: application/octet-stream

  Windows_MinGW-w64_Packages:
    name: Create Windows installer with MinGW-w64
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    needs:
      - determine_version
      - create_release
    steps:
      - name: Checkout Git
        id: checkout_git
        uses: actions/checkout@v3
        with:
          path: performous
      - name: Setup action env and echoing
        shell: bash
        run: |
          echo '::echo::on'
          echo 'action_echo=enabled' >> $GITHUB_OUTPUT
          echo workpath=$(echo '${{ github.workspace }}' | sed 's|\\|/|g') >> $GITHUB_ENV
      - name: Install MSYS2.
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: false
          location: "${{ env.workpath }}"
          install: >-
            git
            mingw-w64-x86_64-boost
            mingw-w64-x86_64-cairo
            mingw-w64-x86_64-cc
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-ffmpeg
            mingw-w64-x86_64-fftw
            mingw-w64-x86_64-fmt
            mingw-w64-x86_64-fontconfig
            mingw-w64-x86_64-gettext
            mingw-w64-x86_64-glm
            mingw-w64-x86_64-gtest
            mingw-w64-x86_64-icu
            mingw-w64-x86_64-libepoxy
            mingw-w64-x86_64-libjpeg-turbo
            mingw-w64-x86_64-libpng
            mingw-w64-x86_64-librsvg
            mingw-w64-x86_64-libsigc++
            mingw-w64-x86_64-libxml++
            mingw-w64-x86_64-libxml2
            mingw-w64-x86_64-make
            mingw-w64-x86_64-nsis
            mingw-w64-x86_64-nlohmann-json
            mingw-w64-x86_64-openblas
            mingw-w64-x86_64-opencv
            mingw-w64-x86_64-opencv
            mingw-w64-x86_64-pango
            mingw-w64-x86_64-portaudio
            mingw-w64-x86_64-portmidi
            mingw-w64-x86_64-SDL2
            mingw-w64-x86_64-winpthreads-git

      - name: Run cmake to configure the project and build it
        env:
          PERFORMOUS_VERSION: ${{ needs.determine_version.outputs.complete_version }}
        shell: msys2 {0}
        run: |
          cd "${{ env.workpath }}/performous"
          mkdir build
          for f in $(ls -Q ./lang/*.po); do mkdir -pv "./build/lang/$(basename $f | cut -d. -f1)/LC_MESSAGES";done
          cd build
          "${{ env.workpath }}/msys64/mingw64/bin/cmake.exe" -G "MinGW Makefiles" .. -DCMAKE_BUILD_TYPE="Release" -DSELF_BUILT_AUBIO=ALWAYS -DENABLE_WEBSERVER=OFF -DPERFORMOUS_VERSION=${{ env.PERFORMOUS_VERSION }} -DCMAKE_VERBOSE_MAKEFILE=ON -DCPACK_MINGW_SYSTEM_PREFIX="${{ env.workpath }}/msys64/mingw64"
          "${{ env.workpath }}/msys64/mingw64/bin/cmake.exe" --build ./ --verbose --parallel 3
      - name: Run unittests directly called.
        shell: msys2 {0}
        run: |
          cd "${{ env.workpath }}/performous/build/testing"
          ./performous_test.exe --gtest_filter=UnitTest*
      - name: Run unittests by ctest.
        shell: msys2 {0}
        run: |
          cd "${{ env.workpath }}/performous/build"
          "${{ env.workpath }}/msys64/mingw64/bin/mingw32-make.exe" test
      - name: Create Installer
        id: package_performous_x64
        shell: msys2 {0}
        run: |
           cd "${{ env.workpath }}/performous/build"
           "${{ env.workpath }}/msys64/mingw64/bin/cpack.exe" -G NSIS64 -DCPACK_MINGW_SYSTEM_PREFIX="${{ env.workpath }}/msys64/mingw64" -DCPACK_NSIS_EXECUTABLE="${{ env.workpath }}/msys64/mingw64/bin/makensis.exe" -DCMAKE_BUILD_TYPE="Release" --verbose
           powershell -command "Copy-Item \$(Get-ChildItem -Filter '*win64.exe').Name 'Performous-latest-mingw-w64.exe'"
           powershell -command "Rename-Item \$(Get-ChildItem -Filter '*win64.exe').Name -NewName 'Performous-${{ needs.determine_version.outputs.complete_version }}-mingw-w64.exe'"
           powershell -command "echo ('ARTIFACT_PATH=${{ env.workpath }}/performous/build/Performous-${{ needs.determine_version.outputs.complete_version }}-mingw-w64.exe') >> \$env:GITHUB_ENV"
           powershell -command "echo ('ARTIFACT_FILENAME=Performous-${{ needs.determine_version.outputs.complete_version }}-mingw-w64.exe') >> \$env:GITHUB_ENV"
           powershell -command "echo ('MASTER_ARTIFACT_PATH=${{ env.workpath }}/performous/build/Performous-latest-mingw-w64.exe') >> \$env:GITHUB_ENV"
           powershell -command "echo ('MASTER_ARTIFACT_FILENAME=Performous-latest-mingw-w64.exe') >> \$env:GITHUB_ENV"
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        if: ${{ github.event_name == 'pull_request' }}
        with:
          name: ${{ env.ARTIFACT_FILENAME }}
          path: ${{ env.ARTIFACT_PATH }}

      - name: Upload artifact with unified name
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.MASTER_ARTIFACT_FILENAME }}
          path: ${{ env.MASTER_ARTIFACT_PATH }}

      - name: Upload artifacts to tagged release
        id: upload_assets
        uses: actions/upload-release-asset@v1
        if: ${{ github.event_name != 'pull_request' && github.ref_type == 'tag' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ env.ARTIFACT_PATH }}
          asset_name: ${{ env.ARTIFACT_FILENAME }}
          asset_content_type: application/octet-stream
