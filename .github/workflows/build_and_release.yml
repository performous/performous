name: Build and Release Performous

# Controls when the workflow will run
on:
  # Triggers the workflow on merges to master, release branches,
  # all PRs, and release tags 
  push:
    branches:
      - master
      - '[0-9]+\.[0-9]+\.[0-9]+-rc[0-9]+'
    tags:
      - '[0-9]+\.[0-9]+\.[0-9]+'
      - '[0-9]+\.[0-9]+\.[0-9]+-rc[0-9]+'

  # On anything pull request related
  pull_request:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Note: entire jobs or sections can be disabled by adding
# if: ${{ false }} to the definition column
jobs:
  # Determine version
  determine_version:
    name: Determine the version to be used
    runs-on: ubuntu-latest
    outputs:
      latest_tag_version: ${{ steps.versioning.outputs.latest_tag_version }}
      latest_full_tag_version: ${{ steps.versioning.outputs.latest_full_tag_version }}
      version_major: ${{ steps.versioning.outputs.version_major }}
      version_minor: ${{ steps.versioning.outputs.version_minor }}
      version_patch: ${{ steps.versioning.outputs.version_patch }}
      version_tweak: ${{ steps.versioning.outputs.version_tweak }}
      complete_version: ${{ steps.versioning.outputs.complete_version }}
    steps:
      - name: Determine the complete version
        id: versioning
        run: |
          # Always check the tags on master since it will have the latest.
          # Tags will trigger their own workflow and version names
          git clone --recursive ${{ github.server_url }}/${{ github.repository }}
          cd performous
          LATEST_TAG_VERSION=$(git describe --tags --abbrev=0 || echo 1.0.0)
          LATEST_FULL_TAG_VERSION=$(git describe --tags || echo 1.0.0)
          echo "::set-output name=latest_tag_version::$(git describe --tags --abbrev=0 || echo 1.0.0)"
          echo "::set-output name=latest_full_tag_version::$(git describe --tags || echo 1.0.0)"
          echo "::set-output name=version_major::$(cut -d '.' -f 1 <<< $(git describe --tags --abbrev=0 || echo 1.0.0))"
          echo "::set-output name=version_minor::$(cut -d '.' -f 2 <<< $(git describe --tags --abbrev=0 || echo 1.0.0))"
          echo "::set-output name=version_patch::$(cut -d '.' -f 3 <<< $(git describe --tags --abbrev=0 || echo 1.0.0))"
          echo "::set-output name=version_tweak::0"
          echo "::set-output name=complete_version::$(if [ $GITHUB_REF_TYPE == 'tag' ]; then echo $GITHUB_REF_NAME; elif [ $GITHUB_REF_TYPE == 'branch' ] && [ $GITHUB_REF_NAME == 'master' ]; then echo $LATEST_FULL_TAG_VERSION-beta; elif [ $GITHUB_REF_TYPE == 'branch' ] && [ $GITHUB_REF_NAME != 'master' ]; then echo $LATEST_TAG_VERSION-${{github.event.pull_request.number}}-${GITHUB_SHA::7}-alpha; fi)"
          rm -rf performous

  # Set up a release that packages will be published to.
  create_release:
    name: Create a release
    runs-on: ubuntu-latest
    # Make sure the output variable for this step is set so it
    # can be consumed by later build steps
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create the Main release
        id: create_release
        if: ${{ github.event_name != 'pull_request' && github.ref_type == 'tag' }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Performous ${{ github.ref_name }}
          draft: true
          prerelease: false

  # Create the Linux Packages
  # This is done in containers provided by
  # https://github.com/performous/performous-docker since
  # github actions provides only Ubuntu
  Linux_Packages:
    # The upload step needs the release to be created first so it
    # can access the upload_url output. This step also needs the output from
    # the version dteremination job to name things correctly.
    name: Create Linux packages
    needs:
      - determine_version
      - create_release
    # Ubuntu required for Linux containers
    runs-on: ubuntu-latest
    # The docker registry here is hard-coded because it it publicly visible
    # and therefore will work if forked. If you are setting up a registry,
    # make sure the visibility of the registry is set to "public".
    # This is necessary because the container registry is set up under a
    # different github repository than this one, and GITHUB_TOKEN is only
    # valid for one session in the repo the job was started under.
    # Because the the performous-docker gh repo created the registry, it has
    # ownership over the registry in ghcr.io and cannot be accessed from here.
    container: ghcr.io/performous/deps:${{ matrix.os }}
    strategy:
      matrix:
        os:
          # Images must be added to 
          # https://github.com/performous/performous-docker with
          # a successful run on master before they can be used here
          - ubuntu18.04
          - ubuntu20.04
          - ubuntu22.04
          - fedora34
          - fedora35
          - fedora36
          - debian10
          - debian11
    steps:
      - name: Checkout Git
        id: checkout_git
        uses: actions/checkout@v3
        with:
          path: performous

      - name: Build package
        id: build_package
        run: |
          cd performous
          # Pull in OS variables to figure out options later
          . /etc/os-release

          ## Set up some special cmake flags for fedora
          if [ "${ID}" == "fedora" ]; then
            EXTRA_CMAKE_ARGS="-DUSE_BOOST_REGEX=1"
          fi

          if ([ "${ID}" = "ubuntu" ] && [ "${VERSION_ID}" = "18.04" ]) || ([ "${ID}" = "debian" ] && [ "${VERSION_ID}" = "10" ]); then
            # Ubuntu 18.04 and Debian Buster has system Aubio 0.4.5, this is not enough
            # because performous requires a minimum version of 0.4.9.
            EXTRA_CMAKE_ARGS="${EXTRA_CMAKE_ARGS} -DSELF_BUILT_AUBIO=ALWAYS"
            if ([ "${ID}" = "ubuntu" ]); then
              export CC=gcc-8
              export CXX=g++-8
            fi
          fi

          ## Figure out what type of packages we need to generate
          case ${ID} in
            'fedora')
              PACKAGE_TYPE='RPM';;
            'ubuntu'|'debian')
              PACKAGE_TYPE='DEB';;
            *)
              PACKAGE_TYPE='TGZ';;
          esac

          PACKAGE_VERSION=${{ needs.determine_version.outputs.complete_version }}
          echo $PACKAGE_VERSION

          # Build the Packages
          mkdir build_cmake
          cd build_cmake
          cmake ${EXTRA_CMAKE_ARGS} -DCMAKE_BUILD_TYPE=Release \
            -DPERFORMOUS_VERSION=$PACKAGE_VERSION \
            -DENABLE_WEBSERVER=ON \
            -DCMAKE_VERBOSE_MAKEFILE=1 \
            -DENABLE_WEBCAM=ON ..
          CPU_CORES=$(nproc --all)
          make -j${CPU_CORES}
          cpack -G ${PACKAGE_TYPE}
          
          # Do some mangling to make a unique name based on the OS
          # This is needed so we don't overwite in the release each time.
          # We should probably investigate what cmake can do for package output
          # to make this cleaner in the future
          WORK_DIR=$(pwd)
          PACKAGE_PATH=$(ls ${WORK_DIR}/Performous*-Linux.*)
          PACKAGE_NAME=$(echo ${PACKAGE_PATH} | sed 's/\(Performous\).*$/\1/')
          PACKAGE_SUFFIX=$(echo ${PACKAGE_PATH} | sed 's/^.*\(.\{4\}\)/\1/')
          NEW_PACKAGE_NAME="${PACKAGE_NAME}-${PACKAGE_VERSION}-${ID}_${VERSION_ID}${PACKAGE_SUFFIX}"
          MASTER_NEW_PACKAGE_NAME="${PACKAGE_NAME}-latest-${ID}_${VERSION_ID}${PACKAGE_SUFFIX}"
          cp ${PACKAGE_PATH} ${MASTER_NEW_PACKAGE_NAME}
          mv ${PACKAGE_PATH} ${NEW_PACKAGE_NAME}
          ARTIFACT_NAME=$( echo ${NEW_PACKAGE_NAME} | rev | cut -d '/' -f1 | rev)
          MASTER_ARTIFACT_NAME=$( echo ${MASTER_NEW_PACKAGE_NAME} | rev | cut -d '/' -f1 | rev)
          echo "ARTIFACT_PATH=${NEW_PACKAGE_NAME}" >> ${GITHUB_ENV}
          echo "ARTIFACT_NAME=${ARTIFACT_NAME}" >> ${GITHUB_ENV}
          echo "MASTER_ARTIFACT_PATH=${MASTER_NEW_PACKAGE_NAME}" >> ${GITHUB_ENV}
          echo "MASTER_ARTIFACT_NAME=${MASTER_ARTIFACT_NAME}" >> ${GITHUB_ENV}

      # Upload artifacts during pull-requests
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        if: ${{ github.event_name == 'pull_request' }}
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_PATH }}

      # Upload artifacts on master
      - name: Upload artifact with unified name
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.MASTER_ARTIFACT_NAME }}
          path: ${{ env.MASTER_ARTIFACT_PATH }}
 
      # Upload artifacts to releases only during Release events
      - name: Upload artifacts to tagged release
        id: upload_assets
        if: ${{ github.event_name != 'pull_request' && github.ref_type == 'tag' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ env.ARTIFACT_PATH }}
          asset_name: ${{ env.ARTIFACT_NAME }}
          asset_content_type: application/octet-stream

  # Create the AppImage
  AppImage:
    name: Create the AppImage
    needs:
      - determine_version
      - create_release
    runs-on: ubuntu-20.04
    steps:
      - name: Install the AppImage bundler and Performous deps
        id: fetch_deps
        run: |
          wget -O appimage-builder-x86_64.AppImage https://github.com/AppImageCrafters/appimage-builder/releases/download/v1.0.0-beta.1/appimage-builder-1.0.0-677acbd-x86_64.AppImage
          chmod +x appimage-builder-x86_64.AppImage
          sudo mv appimage-builder-x86_64.AppImage /usr/local/bin/appimage-builder
          sudo apt-get install -y --no-install-recommends git cmake build-essential gettext help2man libopenblas-dev libfftw3-dev libicu-dev libepoxy-dev libsdl2-dev libfreetype6-dev libpango1.0-dev librsvg2-dev libxml++2.6-dev libavcodec-dev libavformat-dev libswscale-dev libjpeg-dev portaudio19-dev libglm-dev libboost-filesystem-dev libboost-iostreams-dev libboost-locale-dev libboost-system-dev libboost-program-options-dev libssl-dev libcpprest-dev libportmidi-dev libopencv-dev libaubio-dev nlohmann-json3-dev

      - name: Checkout Git
        id: checkout_git
        uses: actions/checkout@v3
        with:
          path: performous

      - name: Build the AppImage
        id: build_appimage
        run: |
          cd performous
          PACKAGE_VERSION=${{ needs.determine_version.outputs.complete_version }}
          sed -i s/@@VERSION@@/${PACKAGE_VERSION}/ AppImageBuilder.yml
          mkdir build
          cd build
          cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Release -DENABLE_WEBSERVER=ON -DENABLE_WEBCAM=ON -DPERFORMOUS_VERSION=$PACKAGE_VERSION ..
          make -j$(nproc) install DESTDIR=../AppDir
          cd ..
          appimage-builder --recipe AppImageBuilder.yml --skip-test

          WORK_DIR=$(pwd)
          PACKAGE_PATH=$(ls ${WORK_DIR}/*.AppImage)
          PACKAGE_NAME=$(echo ${PACKAGE_PATH} | sed 's/\(Performous\).*$/\1/')
          PACKAGE_SUFFIX=".AppImage"
          NEW_PACKAGE_NAME="${PACKAGE_NAME}-${PACKAGE_VERSION}${PACKAGE_SUFFIX}"
          MASTER_NEW_PACKAGE_NAME="${PACKAGE_NAME}-latest${PACKAGE_SUFFIX}"
          cp ${PACKAGE_PATH} ${MASTER_NEW_PACKAGE_NAME}
          mv ${PACKAGE_PATH} ${NEW_PACKAGE_NAME}
          ARTIFACT_NAME=$( echo ${NEW_PACKAGE_NAME} | rev | cut -d '/' -f1 | rev)
          MASTER_ARTIFACT_NAME=$( echo ${MASTER_NEW_PACKAGE_NAME} | rev | cut -d '/' -f1 | rev)
          echo "ARTIFACT_PATH=${NEW_PACKAGE_NAME}" >> ${GITHUB_ENV}
          echo "ARTIFACT_NAME=${ARTIFACT_NAME}" >> ${GITHUB_ENV}
          echo "MASTER_ARTIFACT_PATH=${MASTER_NEW_PACKAGE_NAME}" >> ${GITHUB_ENV}
          echo "MASTER_ARTIFACT_NAME=${MASTER_ARTIFACT_NAME}" >> ${GITHUB_ENV}

      # Upload artifacts during pull-requests
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        if: ${{ github.event_name == 'pull_request' }}
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_PATH }}

      # Upload artifacts on master
      - name: Upload artifact with unified name
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.MASTER_ARTIFACT_NAME }}
          path: ${{ env.MASTER_ARTIFACT_PATH }}

      # Upload artifacts to releases only during Release events
      - name: Upload artifacts to tagged release
        id: upload_assets
        if: ${{ github.event_name != 'pull_request' && github.ref_type == 'tag' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ env.ARTIFACT_PATH }}
          asset_name: ${{ env.ARTIFACT_NAME }}
          asset_content_type: application/octet-stream


  # Create the MacOS dmg
  MacOS_Packages:
    name: Create MacOS dmg
    needs:
      - determine_version
      - create_release
    runs-on: macos-latest
    steps:
      - name: Checkout Git
        id: checkout_git
        uses: actions/checkout@v3
        with:
          path: performous


      # brew fetch runs downloads in parallel, which is faster
      # than letting install do it
      - name: Fetch Dependencies
        id: fetch_deps
        run: |
          brew fetch --deps boost cmake ffmpeg@4 help2man icu4c portaudio\
            portmidi opencv libepoxy librsvg libxml++3 sdl2 dylibbundler\
            aubio fftw glm nlohmann-json

      - name: Install Dependencies
        id: install_deps
        run: |
           brew install boost cmake ffmpeg@4 help2man icu4c portaudio\
            portmidi opencv libepoxy librsvg libxml++3 sdl2 dylibbundler\
            aubio fftw glm nlohmann-json
           brew link ffmpeg@4

      - name: Build package
        id: build_package
        run: |
          cd performous/osx-utils
          # This export is required because the variable is consumed by the 
          # MacOS build script to set the version correctly
          export PACKAGE_VERSION=${{ needs.determine_version.outputs.complete_version }}
          echo $PACKAGE_VERSION
          chmod +x ./performous-app-build.sh
          ./performous-app-build.sh
          WORK_DIR=$(pwd)
          PACKAGE_PATH=$(ls ${WORK_DIR}/Performous.*)
          PACKAGE_NAME=$(echo ${PACKAGE_PATH} | sed 's/\(Performous\).*$/\1/')
          PACKAGE_SUFFIX=$(echo ${PACKAGE_PATH} | sed 's/^.*\(.\{4\}\)/\1/')
          NEW_PACKAGE_NAME="${PACKAGE_NAME}-${PACKAGE_VERSION}${PACKAGE_SUFFIX}"
          MASTER_NEW_PACKAGE_NAME="${PACKAGE_NAME}-latest${PACKAGE_SUFFIX}"
          cp ${PACKAGE_PATH} ${MASTER_NEW_PACKAGE_NAME}
          mv ${PACKAGE_PATH} ${NEW_PACKAGE_NAME}
          ARTIFACT_NAME=$( echo ${NEW_PACKAGE_NAME} | rev | cut -d '/' -f1 | rev)
          MASTER_ARTIFACT_NAME=$( echo ${MASTER_NEW_PACKAGE_NAME} | rev | cut -d '/' -f1 | rev)
          echo "ARTIFACT_PATH=${NEW_PACKAGE_NAME}" >> ${GITHUB_ENV}
          echo "ARTIFACT_NAME=${ARTIFACT_NAME}" >> ${GITHUB_ENV}
          echo "MASTER_ARTIFACT_PATH=${MASTER_NEW_PACKAGE_NAME}" >> ${GITHUB_ENV}
          echo "MASTER_ARTIFACT_NAME=${MASTER_ARTIFACT_NAME}" >> ${GITHUB_ENV}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        if: ${{ github.event_name == 'pull_request' }}
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_PATH }}

      - name: Upload artifact with unified name
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.MASTER_ARTIFACT_NAME }}
          path: ${{ env.MASTER_ARTIFACT_PATH }}

      - name: Upload artifacts to tagged release
        id: upload_assets
        if: ${{ github.event_name != 'pull_request' && github.ref_type == 'tag' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ env.ARTIFACT_PATH }}
          asset_name: ${{ env.ARTIFACT_NAME }}
          asset_content_type: application/octet-stream

  # Create the Windows installer
  Windows_Packages:
    name: Create Windows installer
    needs:
      - determine_version
      - create_release
    runs-on: windows-latest
    steps:
      - name: Checkout Git
        id: checkout_git
        uses: actions/checkout@v3
        with:
          path: performous


      - name: Setup our dev environment
        uses: ilammy/msvc-dev-cmd@v1.4.1

      - name: Setup ninja cmake generator
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Download and build our dependencies using vcpkg
        uses: lukka/run-vcpkg@v10.2
        with:
          vcpkgGitCommitId: '71d274d7ce32d7f2508062a70e0a5ebe981319eb'
          runVcpkgInstall: true

      - name: Run cmake to configure the project and build it
        env:
          PERFORMOUS_VERSION: ${{ needs.determine_version.outputs.complete_version }}
        run: |
          cd ${{ github.workspace }}/performous
          echo $PERFORMOUS_VERSION
          cmake --preset "x64-release"
          cmake --build --preset "x64-release"

      - name: Create Installer
        id: package_performous_x64
        run: |
           cd performous/build/x64-release
           cpack -G NSIS x64-release
           Copy-Item $(Get-ChildItem -Filter '*win64.exe').Name "Performous-latest.exe"
           Rename-Item $(Get-ChildItem -Filter '*win64.exe').Name -NewName "Performous-${{ needs.determine_version.outputs.complete_version }}.exe"
           chcp 65001 #set code page to utf-8
           echo ("ARTIFACT_PATH=${{ github.workspace }}/performous/build/x64-release/Performous-${{ needs.determine_version.outputs.complete_version }}.exe") >> $env:GITHUB_ENV
           echo ("ARTIFACT_FILENAME=Performous-${{ needs.determine_version.outputs.complete_version }}.exe") >> $env:GITHUB_ENV
           echo ("MASTER_ARTIFACT_PATH=${{ github.workspace }}/performous/build/x64-release/Performous-latest.exe") >> $env:GITHUB_ENV
           echo ("MASTER_ARTIFACT_FILENAME=Performous-latest.exe") >> $env:GITHUB_ENV

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        if: ${{ github.event_name == 'pull_request' }}
        with:
          name: ${{ env.ARTIFACT_FILENAME }}
          path: ${{ env.ARTIFACT_PATH }}

      - name: Upload artifact with unified name
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.MASTER_ARTIFACT_FILENAME }}
          path: ${{ env.MASTER_ARTIFACT_PATH }}

      - name: Upload artifacts to tagged release
        id: upload_assets
        uses: actions/upload-release-asset@v1
        if: ${{ github.event_name != 'pull_request' && github.ref_type == 'tag' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ env.ARTIFACT_PATH }}
          asset_name: ${{ env.ARTIFACT_FILENAME }}
          asset_content_type: application/octet-stream
